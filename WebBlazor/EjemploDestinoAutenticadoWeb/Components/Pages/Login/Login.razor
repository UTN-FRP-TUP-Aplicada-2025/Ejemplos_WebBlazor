@page "/login"


@layout LoginLayout

@using EjemploData.Models
@using EjemploData.Services
@using System.Security.Claims

@* esta using hace visible a SignOutAsync*@
@using EjemploDestinoAutenticadoWeb.Components.Layout
@using Microsoft.AspNetCore.Authentication
@using System.IdentityModel.Tokens.Jwt
@using System.Text
@using Microsoft.IdentityModel.Tokens

<div class="container">

    <h3>Login</h3>

    <div class="card p-2 col-8">
        <EditForm Model="@usuarioModel" OnValidSubmit="OnSubmit" FormName="LoginForm" Enhance>

            @if (isError)
            {
                <div class="alert-danger">@error</div>
            }
            <DataAnnotationsValidator  />
            <ValidationSummary class="alert alert-danger" />

            <div class="mb-3">
                <label class="form-label" for="campo1">Nombre</label>
                <InputText id="usuario" class="form-control" @bind-Value="usuarioModel.Nombre" />
                <ValidationMessage For="@(() => usuarioModel.Nombre)" style="color:indianred" />
            </div>

            <div class="mb-3">
                <label class="form-label" for="campo1">Clave</label>
                <InputText id="clave" type="password"  class="form-control" @bind-Value="usuarioModel.Clave" />
                <ValidationMessage For="@(() => usuarioModel.Clave)" style="color:indianred" />
            </div>

            <div>
                <button type="submit" class="btn btn-primary">Ingresar</button>
            </div>
        </EditForm>
    </div>
</div>

@code
{
    string error;
    bool isError;

    [SupplyParameterFromForm]
    private UsuarioModel usuarioModel { get; set; } = new();

    [Inject] UsuariosService _usuarioService { get; set; }
    [Inject] IHttpContextAccessor _HttpContextAccessor { get; set; }
    [Inject] Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var httpContext = _HttpContextAccessor.HttpContext;
        if (httpContext != null)
        {
            var ssoToken = httpContext.Request.Query["sso_token"];
            if (!string.IsNullOrEmpty(ssoToken))
            {
                await ProcessSSOToken(ssoToken);
                return;
            }
        }
    }

    async Task ProcessSSOToken(string token)
    {
        try
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.UTF8.GetBytes("tu-clave-secreta-muy-segura-de-al-menos-32-caracteres");

            var validationParameters = new TokenValidationParameters
            {
                ValidateIssuer = true,
                ValidateAudience = true,
                ValidateLifetime = true,
                ValidateIssuerSigningKey = true,
                ValidIssuer = "App2",
                ValidAudience = "App1",
                IssuerSigningKey = new SymmetricSecurityKey(key)
            };

            var principal = tokenHandler.ValidateToken(token, validationParameters, out SecurityToken validatedToken);

            // Extraer claims del token
            var nombreUsuario = principal.FindFirst(ClaimTypes.Name)?.Value;

            if (!string.IsNullOrEmpty(nombreUsuario))
            {
                // Crear sesión automáticamente
                var claims = new List<Claim>
                {
                    new Claim(ClaimTypes.Name, nombreUsuario),
                    new Claim("CUIT", "23244324"), // claim personalizada
                    new Claim("LoginMethod", "SSO")
                };

                var identity = new ClaimsIdentity(claims, "Cookies");
                var cookiePrincipal = new ClaimsPrincipal(identity);

                var httpContext = _HttpContextAccessor.HttpContext;
                if (httpContext != null)
                {
                    await httpContext.SignInAsync("Cookies", cookiePrincipal);
                    var returnUrl = httpContext.Request.Query["returnurl"];
                    if (string.IsNullOrEmpty(returnUrl))
                        returnUrl = "/personas";

                    Navigation.NavigateTo(returnUrl, forceLoad: true);
                }
            }
        }
        catch (Exception ex)
        {
            error = "Token SSO inválido: " + ex.Message;
            isError = true;
        }
    }

    async public Task OnSubmit()
    {
        if (await _usuarioService.VerificarLogin(usuarioModel) ==null)
        {
            error= " Usuario o Contraseña no válidos!";
            isError = true;
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, usuarioModel.Nombre),
            new Claim("CUIT", "23244324") // claim personalizada
        };

        #region claim
        var identity = new ClaimsIdentity(claims, "Cookies");
        var principal = new ClaimsPrincipal(identity);
        #endregion

        var httpContext = _HttpContextAccessor.HttpContext;
        if (httpContext != null)
        {
            await httpContext.SignInAsync("Cookies", principal);
            var returnUrl = httpContext.Request.Query["returnurl"];
            returnUrl = "/personas";
            Navigation.NavigateTo(returnUrl, forceLoad: true);
        }
        else
        {
            error = "No se pudo iniciar sesión debido a un error interno.";
        }

    }
}
