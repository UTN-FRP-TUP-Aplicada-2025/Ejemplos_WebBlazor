@page "/personas"

@rendermode InteractiveServer

@* cuando se depende de asincronos *@
@attribute [StreamRendering]

@attribute [Authorize]


@using EjemploData.Models
@using EjemploData.Services
@using Microsoft.AspNetCore.Authorization

<div class="container">
@inject NavigationManager NavManager

@if (isVisibleFormDetailRegistro == true)
{
    <div>
        <h2>Respuesta</h2>
        <hr />
        @if (_personasViewModel is null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <dl class="row">

                <dt class="col-sm-2">Id</dt>
                <dd class="col-sm-10">@_personaModel?.Id</dd>

                <dt class="col-sm-2">DNI</dt>
                <dd class="col-sm-10">@_personaModel?.DNI</dd>

                <dt class="col-sm-2">Nombre</dt>
                <dd class="col-sm-10">@_personaModel?.Nombre</dd>

                <dt class="col-sm-2">FechaNacimiento</dt>
                <dd class="col-sm-10">@_personaModel?.FechaNacimiento</dd>
            </dl>
            <div>
                <button class="link-button" @onclick="() => viewFormDetailRegistro(_personaModel.Id)"><i class="fa-solid fa-pen"></i></button>
            </div>
        }
    </div>
}
else if (isVisibleFormNewEditRegistro == true)
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="_personaModel" OnValidSubmit="editPersona" FormName="create" Enhance>

                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <div class="mb-3">
                    <label for="id" class="form-label">Id:</label>
                    <InputNumber id="id" @bind-Value="_personaModel.Id" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => _personaModel.Id" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="nombre" class="form-label">Nombre:</label>
                    <InputText id="nombre" @bind-Value="_personaModel.Nombre" class="form-control" />
                    <ValidationMessage For="() => _personaModel.Nombre" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dni" class="form-label">DNI:</label>
                    <InputNumber id="dni" @bind-Value="_personaModel.DNI" class="form-control" />
                    <ValidationMessage For="() => _personaModel.DNI" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="fechaNacimiento" class="form-label">Fecha de Nacimiento:</label>
                    <InputDate id="fechaNacimiento" @bind-Value="_personaModel.FechaNacimiento" class="form-control" />
                    <ValidationMessage For="() => _personaModel.FechaNacimiento" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Crear Registro</button>
            </EditForm>
        </div>
    </div>
}

<p>
    <button class="link-button" @onclick="() => viewFormNewRegistro()"><i class="fa-solid fa-pen"></i></button>
</p>

@if (_personasViewModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>DNI</th>
                <th>Nombre</th>
                <th>Fecha Nacimiento</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _personasViewModel)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.DNI</td>
                    <td>@item.Nombre</td>
                    <td>@item.FechaNacimiento?.ToShortDateString()</td>
                    <td>
                        <button class="link-button" @onclick="() => viewFormDetailRegistro(item.Id)"><i class="fa-solid fa-pen"></i></button>
                        <button class="link-button" @onclick="() => viewFormDetailRegistro(item.Id)"><i class="fa-solid fa-expand"></i></button>|
                        <button class="link-button" @onclick="() => eliminar(item.Id)"><i class="fa-solid fa-trash"></i></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
</div>

@code {
    [SupplyParameterFromForm]
    private PersonaModel? _personaModel { get; set; }

    private List<PersonaModel>? _personasViewModel { get; set; } = new();

    private bool isVisibleFormDetailRegistro;
    private bool isVisibleFormNewEditRegistro;

    [Inject] private PersonasService _personasService { get; set; }

    //s1 agregue esta variable
    private bool _isLoaded = false;

    async protected override void OnInitialized()
    {
        _personaModel ??= new PersonaModel() { };

        //aquí no me funcionó
        //s1
        _personasViewModel = await _personasService.GetAll();
        StateHasChanged();
    }

    // //s1 agregue este evento
    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender && !_isLoaded)
    //     {
    //         personas = await _personasService.GetAll();
    //         _isLoaded = true;
    //         StateHasChanged(); // Notifica al componente que debe volver a renderizarse
    //     }
    // }

    async protected Task viewFormNewRegistro()
    {
        isVisibleFormNewEditRegistro = true;
        isVisibleFormDetailRegistro = false;
    }

    async protected Task viewFormDetailRegistro(int? id)
    {
        isVisibleFormNewEditRegistro = true;
        isVisibleFormDetailRegistro = false;
        _personaModel = await _personasService.GetById(id??0);
    }



    async private Task Submit()
    {
        _personaModel.FechaNacimiento = DateTime.Now;

        await _personasService.CrearNuevo(_personaModel);

        _personasViewModel.Add(_personaModel);
    }

    private async Task AddPersona()
    {
        _personasService.CrearNuevo(_personaModel);
    }

    private async Task editPersona()
    {
        try
        {
            _personasService.Actualizar(_personaModel);
        }
        catch (Exception e)
        {

        }
    }

    async private Task eliminar(int? id)
    {
        await _personasService.Eliminar((int)id);
        _personasViewModel = await _personasService.GetAll();
    }
}