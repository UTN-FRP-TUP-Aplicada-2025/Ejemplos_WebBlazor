@* Componente Paginacion.razor *@
@namespace Ejemplos.Components

@if (TotalPaginas > 0)
{
    <div class="d-flex justify-content-between align-items-center mt-3">
        <div class="col-12">
            <div class="row">
                <ul class="pagination">
                    @if (1 < PaginaInicial)
                    {
                        <li class="page-item">
                            <button class="page-link" @onclick="PaginaRetroceder">Anterior</button>
                        </li>
                    }
                    @for (int n = PaginaInicial; n <= PaginaFinal; n++)
                    {
                        var pagina = n;
                        <li class="page-item @(pagina == PaginaActual ? "active" : "")">
                            <button class="page-link" @onclick="async () => await PaginaSelected(pagina)">@pagina</button>
                        </li>
                    }
                    @if (PaginaFinal < TotalPaginas)
                    {
                        <li class="page-item">
                            <button class="page-link" @onclick="PaginaAvanzar">Siguiente</button>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
}

@code {
    private int totalItems;
    [Parameter] public int TotalItems 
    {
        get { return totalItems; }
        set
        {
            if (totalItems != value)
            {
                totalItems = value;
                CambiarPagina(1);
            }
        }
    }

    [Parameter] public int ItemsPorPagina { get; set; } = 10;
    [Parameter] public int PaginasVisibles { get; set; } = 5;

    [Parameter] public int PaginaActual { get; set; } = 1;

    [Parameter] public EventCallback<int> PaginaActualChanged { get; set; }

    [Parameter] public EventCallback<int> OnCambioDePagina { get; set; }

    private int paginaInicial = 1;
    public int PaginaInicial
    {
        get
        {
            return paginaInicial;
        }
        private set
        {
            if (value < 1)
                paginaInicial = 1;
            else if (value > TotalPaginas && TotalPaginas > 0)
                paginaInicial = Math.Max(1, TotalPaginas - PaginasVisibles + 1);
            else
                paginaInicial = value;
        }
    }

    public int PaginaFinal
    {
        get
        {
            if (TotalPaginas == 0) return 0;
            int paginaFinal = paginaInicial + PaginasVisibles - 1;
            return Math.Min(paginaFinal, TotalPaginas);
        }
    }

    public int TotalPaginas
    {
        get
        {
            if (ItemsPorPagina <= 0 || TotalItems <= 0)
                return 0;
            return (int)Math.Ceiling((double)TotalItems / ItemsPorPagina);
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        AjustarPaginaInicial();
    }

    private void AjustarPaginaInicial()
    {
        if (PaginaActual < PaginaInicial)
            PaginaInicial = Math.Max(1, PaginaActual - PaginasVisibles / 2);
        else if (PaginaActual > PaginaFinal)
            PaginaInicial = Math.Max(1, PaginaActual - PaginasVisibles / 2);
    }

    private async Task CambiarPagina(int nuevaPagina)
    {
        if (nuevaPagina != PaginaActual && nuevaPagina >= 1 && nuevaPagina <= TotalPaginas)
        {
            PaginaActual = nuevaPagina;

            await PaginaActualChanged.InvokeAsync(PaginaActual);

            await OnCambioDePagina.InvokeAsync(PaginaActual);

            AjustarPaginaInicial();
        }
    }

    private async Task PaginaRetroceder()
    {
        await CambiarPagina(PaginaActual - 1);
    }

    private async Task PaginaAvanzar()
    {
        await CambiarPagina(PaginaActual + 1);
    }

    private async Task PaginaSelected(int pagina)
    {
        await CambiarPagina(pagina);
    }
}