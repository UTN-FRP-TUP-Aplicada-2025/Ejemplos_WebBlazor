@* @typeparam TItem *@
@namespace Ejemplos.Components

<div class="d-flex justify-content-between align-items-center mt-3">
    <div class="col-12">
        <div class="row">
            <ul class="pagination">
                @if (1 < PaginaInicial)
                {
                    <li class="page-item">
                        <button class="page-link" @onclick="PaginaRetroceder">...</button>
                    </li>
                }
                @for (int n = PaginaInicial; n <= PaginaFinal; n++)
                {
                    var pagina = n;
                    <li class="page-item">
                        <button class="page-link"  @onclick="async () => await PaginaSelected(pagina)">@pagina</button>
                    </li>
                }
                @if (PaginaFinal < TotalPaginas)
                {
                    <li class="page-item">
                        <button class="page-link" @onclick="PaginaAvanzar">...</button>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>

@code {
    protected int totalItems;
    [Parameter] public int TotalItems 
    {
        get
        {
            return totalItems;    
        }
        set
        {
            totalItems = value;    

            PaginaInicial = 1;
        }
    }

    protected int itemsPorPagina;
    [Parameter] public int ItemsPorPagina 
    {
        get
        {
            return itemsPorPagina;
        }
        set
        {
            itemsPorPagina = value;    

            PaginaInicial = 1;
        }
    }

    [Parameter] public int PaginaActual { get; set; }

    protected override Task OnParametersSetAsync()
    {
        paginaInicial = 1;
        return base.OnParametersSetAsync();
    }


    [Parameter] public EventCallback<int> OnCambioDePagina { get; set; }

    int paginaInicial;
    public int PaginaInicial 
    {
        get
        {
            return paginaInicial;
        }
        set
        {
            if (value < 1)
                paginaInicial = 1;
            else if (value > TotalPaginas)
                paginaInicial = TotalPaginas;
            else
                paginaInicial = value;
        } 
    }
    public int PaginaFinal
    {
        get
        {
            int paginaFinal=paginaInicial + PaginasVisibles-1;
            if (paginaFinal <= TotalPaginas)
            {
                return paginaFinal;
            }
            else
            {
                return TotalPaginas;
            }
        }
    }

    [Parameter]
    public int PaginasVisibles { get; set; }

    public int TotalPaginas
    {
        get
        {
            if (ItemsPorPagina>0)
                return Convert.ToInt32( Math.Ceiling( 1.0*TotalItems/ItemsPorPagina ) );
            return 0;
        }    
    }

    async void PaginaRetroceder()
    {
        PaginaInicial = paginaInicial - PaginasVisibles-1;

        if (PaginaActual > PaginaFinal)
            await PaginaSelected(PaginaFinal);

        StateHasChanged();
    }

    async void PaginaAvanzar()
    {
        PaginaInicial = paginaInicial + PaginasVisibles;

        if (PaginaActual < PaginaInicial)
            await PaginaSelected(PaginaInicial);

        StateHasChanged();
    }

    private async Task PaginaSelected(int n)
    {
        if(PaginaActual!=n)
        {
            PaginaActual = n;
            await OnCambioDePagina.InvokeAsync(n);

            StateHasChanged();
        }
    }
}